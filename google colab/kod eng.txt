import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Constants matching your C# code
DAYS = 7
SHIFTS = 3
EMPLOYEES = 5

class Employee:
    def __init__(self, id, name):
        self.id = id
        self.name = name
        self.preferred_shifts = []
        self.preferred_days = []
        self.unpreferred_shifts = []
        self.unpreferred_days = []
        self.preferred_coworkers = {}  # Dictionary: (day, shift) -> count

class EmployerRequirements:
    def __init__(self):
        self.required_employees_per_shift = {}
    
    def get_required(self, day, shift):
        return self.required_employees_per_shift.get((day, shift), 2)
    
    def generate_random_requirements(self, days, shifts, min_employees=1, max_employees=3):
        for d in range(days):
            for s in range(shifts):
                self.required_employees_per_shift[(d, s)] = np.random.randint(min_employees, max_employees + 1)

def generate_sample_data(num_samples=10000):
    """Generate synthetic training data based on your scheduling logic"""
    X = []
    y = []
    
    for _ in range(num_samples):
        # Create random employees with preferences
        employees = []
        for i in range(EMPLOYEES):
            emp = Employee(i, f"Employee {i+1}")
            
            # Random preferences
            emp.preferred_shifts = list(np.random.choice(range(SHIFTS), np.random.randint(1, SHIFTS)))
            emp.preferred_days = list(np.random.choice(range(DAYS), np.random.randint(1, DAYS)))
            emp.unpreferred_shifts = list(np.random.choice(range(SHIFTS), np.random.randint(0, SHIFTS)))
            emp.unpreferred_days = list(np.random.choice(range(DAYS), np.random.randint(0, DAYS)))
            
            # Random preferred coworkers
            for d in range(DAYS):
                for s in range(SHIFTS):
                    if np.random.random() < 0.3:  # 30% chance to have a preference
                        emp.preferred_coworkers[(d, s)] = np.random.randint(1, 4)
            
            employees.append(emp)
        
        # Create employer requirements
        requirements = EmployerRequirements()
        requirements.generate_random_requirements(DAYS, SHIFTS)
        
        # Generate random schedule
        schedule = np.zeros((DAYS, SHIFTS, EMPLOYEES))
        for d in range(DAYS):
            for s in range(SHIFTS):
                required = requirements.get_required(d, s)
                candidates = [e.id for e in employees 
                            if d not in e.unpreferred_days 
                            and s not in e.unpreferred_shifts]
                
                if len(candidates) >= required:
                    selected = np.random.choice(candidates, required, replace=False)
                    for emp_id in selected:
                        schedule[d, s, emp_id] = 1
        
        # Create input features
        features = []
        
        # 1. Employee availability (0 or 1 for each day-shift-employee)
        features.extend(schedule.flatten())
        
        # 2. Employee preferences (preferred days and shifts)
        for emp in employees:
            emp_prefs = np.zeros(DAYS + SHIFTS)
            for d in emp.preferred_days:
                emp_prefs[d] = 1
            for s in emp.preferred_shifts:
                emp_prefs[DAYS + s] = 1
            features.extend(emp_prefs)
        
        # 3. Employer requirements
        req_features = []
        for d in range(DAYS):
            for s in range(SHIFTS):
                req_features.append(requirements.get_required(d, s))
        features.extend(req_features)
        
        # 4. Preferred coworkers
        coworker_prefs = np.zeros((DAYS, SHIFTS, EMPLOYEES))
        for emp in employees:
            for (d, s), count in emp.preferred_coworkers.items():
                coworker_prefs[d, s, emp.id] = count
        features.extend(coworker_prefs.flatten())
        
        X.append(features)
        
        # Calculate fitness score (target)
        fitness = evaluate_fitness(schedule, employees, requirements)
        y.append(fitness)
    
    return np.array(X), np.array(y)

def evaluate_fitness(schedule, employees, requirements):
    """Reimplementation of your fitness evaluation logic in Python"""
    score = 0
    
    # Constants from your C# code
    WEIGHT_FOR_PERFECT_EMPLOYEE_COUNT = 20
    PENALTY_FOR_TOO_FEW_EMPLOYEES = -100
    PENALTY_FOR_TOO_MANY_EMPLOYEES = -50
    PENALTY_FOR_MULTIPLE_SHIFTS_PER_DAY = -100
    REWARD_FOR_PREFERRED_SHIFT = 5
    REWARD_FOR_PREFERRED_DAY = 5
    PENALTY_FOR_UNPREFERRED_SHIFT = -50
    PENALTY_FOR_UNPREFERRED_DAY = -50
    PENALTY_FOR_FORBIDDEN_ASSIGNMENT = -100
    
    # 1. Evaluate employee counts
    for d in range(DAYS):
        for s in range(SHIFTS):
            count = np.sum(schedule[d, s, :])
            required = requirements.get_required(d, s)
            
            if count < required:
                score += PENALTY_FOR_TOO_FEW_EMPLOYEES
            elif count > required:
                score += PENALTY_FOR_TOO_MANY_EMPLOYEES
            else:
                score += WEIGHT_FOR_PERFECT_EMPLOYEE_COUNT
    
    # 2. Evaluate employee preferences
    for emp in employees:
        for d in range(DAYS):
            for s in range(SHIFTS):
                if schedule[d, s, emp.id] == 1:
                    # Rewards for preferences
                    if s in emp.preferred_shifts:
                        score += REWARD_FOR_PREFERRED_SHIFT
                    if d in emp.preferred_days:
                        score += REWARD_FOR_PREFERRED_DAY
                    
                    # Penalties for unpreferred
                    if s in emp.unpreferred_shifts:
                        score += PENALTY_FOR_UNPREFERRED_SHIFT
                    if d in emp.unpreferred_days:
                        score += PENALTY_FOR_UNPREFERRED_DAY
                    
                    # Additional penalty if required but employee doesn't want
                    required = requirements.get_required(d, s)
                    if required > 0 and (d in emp.unpreferred_days or s in emp.unpreferred_shifts):
                        score += PENALTY_FOR_FORBIDDEN_ASSIGNMENT
    
    # 3. Evaluate shift rules (no multiple shifts per day)
    for d in range(DAYS):
        for emp in employees:
            shifts_worked = np.sum(schedule[d, :, emp.id])
            if shifts_worked > 1:
                score += PENALTY_FOR_MULTIPLE_SHIFTS_PER_DAY
    
    return score

def build_model(input_shape):
    """Build the neural network model"""
    model = keras.Sequential([
        layers.Dense(256, activation='relu', input_shape=(input_shape,)),
        layers.BatchNormalization(),
        layers.Dropout(0.3),
        layers.Dense(128, activation='relu'),
        layers.BatchNormalization(),
        layers.Dropout(0.3),
        layers.Dense(64, activation='relu'),
        layers.Dense(1)  # Output a single fitness score
    ])
    
    model.compile(
        optimizer=keras.optimizers.Adam(learning_rate=0.001),
        loss='mse',
        metrics=['mae']
    )
    
    return model

def preprocess_data(X, y):
    """Normalize features and split into train/test sets"""
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # Split data
    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y, test_size=0.2, random_state=42)
    
    return X_train, X_test, y_train, y_test, scaler

# Main execution
if __name__ == "__main__":
    # Generate or load your data
    print("Generating training data...")
    X, y = generate_sample_data(50000)  # Generate 50,000 samples
    
    print("Preprocessing data...")
    X_train, X_test, y_train, y_test, scaler = preprocess_data(X, y)
    
    print("Building model...")
    model = build_model(X_train.shape[1])
    
    print("Training model...")
    history = model.fit(
        X_train, y_train,
        epochs=50,
        batch_size=64,
        validation_split=0.2,
        verbose=1
    )
    
    # Evaluate model
    print("Evaluating model...")
    test_loss, test_mae = model.evaluate(X_test, y_test, verbose=0)
    print(f"\nTest MAE: {test_mae:.2f}")
    
    # Plot training history
    plt.plot(history.history['mae'], label='Training MAE')
    plt.plot(history.history['val_mae'], label='Validation MAE')
    plt.xlabel('Epoch')
    plt.ylabel('Mean Absolute Error')
    plt.legend()
    plt.show()
    
    # Save the model for later use
    model.save('scheduling_model.h5')
    print("Model saved as scheduling_model.h5")
    
    # Example of using the model to predict fitness
    print("\nExample prediction:")
    example_input = X_test[0:1]  # Take first test sample
    predicted_fitness = model.predict(example_input)[0][0]
    actual_fitness = y_test[0]
    print(f"Predicted fitness: {predicted_fitness:.1f}, Actual fitness: {actual_fitness}")
Klasa Schedule do trzymania harmonogramu:
Klasa Employee (opcjonalnie)
Dla rozbudowy â€“ np. dodanie preferencji:

 Cel funkcji fitness
OceniÄ‡ harmonogram wg:

âœ… Twardych ograniczeÅ„ (muszÄ… byÄ‡ speÅ‚nione)
Jeden pracownik moÅ¼e mieÄ‡ tylko jednÄ… zmianÄ™ dziennie

Na kaÅ¼dej zmianie musi byÄ‡ okreÅ›lona liczba pracownikÃ³w (np. min. 2, max. 3)

ğŸ’¡ MiÄ™kkich preferencji (dobrze by byÅ‚o)
Pracownik woli pracowaÄ‡ rano

Pracownik woli nie pracowaÄ‡ w weekend

MiÄ™kkie ograniczenia dajÄ… punkty dodatnie lub ujemne (np. +1 za preferowanÄ… zmianÄ™, -2 za pracÄ™ w weekend gdy ktoÅ› nie chce).

Klasa FitnessEvaluator
Dodajmy klasÄ™, ktÃ³ra oceni harmonogram:

 Co robimy w algorytmie genetycznym?
Inicjalizacja populacji â€“ wiele losowych harmonogramÃ³w.

Ocena dopasowania â€“ funkcja fitness (juÅ¼ mamy!).

Selekcja â€“ wybieramy lepsze osobniki do krzyÅ¼owania.

KrzyÅ¼owanie (crossover) â€“ mieszamy dwa harmonogramy.

Mutacja â€“ zmieniamy losowo maÅ‚e fragmenty, by szukaÄ‡ nowych rozwiÄ…zaÅ„.

Iteracja â€“ powtarzamy, aÅ¼ znajdziemy dobre rozwiÄ…zanie.
Klasa GeneticAlgorithm



 var parents = scored.Take(_populationSize / 2).Select(x => x.Schedule).ToList();// sprawdziÄ‡ czemu 2 
 wytÅ‚umaczenie tej linijki czemu dziele przez 2 
 Selekcja elitarna:
WczeÅ›niej populacja zostaÅ‚a posortowana malejÄ…co wedÅ‚ug przystosowania (fitness), wiÄ™c scored zawiera harmonogramy od najlepszego do najgorszego.
Take(_populationSize / 2) wybiera 50% najlepszych harmonogramÃ³w z bieÅ¼Ä…cej populacji. Te harmonogramy stajÄ… siÄ™ rodzicami dla nowego pokolenia.

Zachowanie najlepszych osobnikÃ³w:
DzielÄ…c przez 2, ograniczam pulÄ™ rodzicÃ³w do najbardziej przystosowanych, co przyspiesza zbieÅ¼noÅ›Ä‡ algorytmu (unikam "rozmycia" dobrych rozwiÄ…zaÅ„ przez sÅ‚abe osobniki).
RÃ³wnowaga miÄ™dzy eksploracjÄ… a eksploatacjÄ…:

Eksploatacja: WybÃ³r tylko najlepszych rodzicÃ³w zwiÄ™ksza presjÄ™ selekcyjnÄ… (algorytm skupia siÄ™ na ulepszaniu istniejÄ…cych rozwiÄ…zaÅ„).

Eksploracja: Mimo to, krzyÅ¼owanie i mutacje wprowadzajÄ… nowe warianty, zachowujÄ…c rÃ³Å¼norodnoÅ›Ä‡.


GdybyÅ› nie dzieliÅ‚am przez 2 (Take(_populationSize)), wszystkie harmonogramy (nawet te sÅ‚abe) miaÅ‚yby szansÄ™ zostaÄ‡ rodzicami, co mogÅ‚oby spowolniÄ‡ optymalizacjÄ™.